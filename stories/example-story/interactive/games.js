/**
 * Example Games Module
 * In actual stories, this would be generated by AI based on story content
 */

function initGames(containerId) {
  const container = document.getElementById(containerId);
  if (!container) {
    console.error('Games container not found');
    return;
  }

  const games = {
    matching: {
      title: "Character Matching",
      pairs: [
        { character: "Alex", description: "The main character who goes to the park" },
        { character: "Mom", description: "Packs snacks and water" },
        { character: "Dad", description: "Helps little sister on the swing" },
        { character: "Little Sister", description: "Loves the swings" }
      ]
    },
    sequencing: {
      title: "Event Sequencing",
      events: [
        { order: 1, text: "Alex gets ready to go to the park" },
        { order: 2, text: "Family arrives at the park" },
        { order: 3, text: "Alex plays and makes a new friend" },
        { order: 4, text: "Family has snacks and goes home" }
      ]
    }
  };

  function showMenu() {
    container.innerHTML = `
      <div class="game-container">
        <h2>Choose a Game</h2>
        <div class="btn-group">
          <button class="btn btn-primary" onclick="playMatching()">
            Character Matching
          </button>
          <button class="btn btn-primary" onclick="playSequencing()">
            Event Sequencing
          </button>
        </div>
      </div>
    `;
  }

  window.playMatching = function() {
    const game = games.matching;
    let shuffled = [...game.pairs].sort(() => Math.random() - 0.5);
    let selected = null;
    let matches = 0;

    container.innerHTML = `
      <div class="game-container">
        <h2>${game.title}</h2>
        <p>Match each character with their description!</p>
        <div class="game-board" style="grid-template-columns: 1fr 1fr;">
          ${game.pairs.map((pair, i) => `
            <div class="game-card" data-type="character" data-id="${i}">
              <strong>${pair.character}</strong>
            </div>
          `).join('')}
          ${shuffled.map((pair, i) => `
            <div class="game-card" data-type="description" data-desc="${game.pairs.findIndex(p => p.character === pair.character)}">
              ${pair.description}
            </div>
          `).join('')}
        </div>
        <button class="btn btn-secondary" onclick="initGames('${containerId}')">
          Back to Menu
        </button>
      </div>
    `;

    container.querySelectorAll('.game-card').forEach(card => {
      card.addEventListener('click', () => {
        if (card.classList.contains('matched')) return;

        if (!selected) {
          selected = card;
          card.style.background = '#FFF3CD';
        } else {
          const charId = selected.dataset.type === 'character' 
            ? selected.dataset.id 
            : card.dataset.id;
          const descId = selected.dataset.type === 'description'
            ? selected.dataset.desc
            : card.dataset.desc;

          if (charId === descId) {
            selected.classList.add('matched');
            card.classList.add('matched');
            matches++;
            
            if (matches === game.pairs.length) {
              setTimeout(() => {
                alert('ðŸŽ‰ Great job! You matched all the characters!');
              }, 300);
            }
          } else {
            selected.style.background = '';
          }
          selected = null;
        }
      });
    });
  };

  window.playSequencing = function() {
    const game = games.sequencing;
    let shuffled = [...game.events].sort(() => Math.random() - 0.5);
    let userOrder = [];

    container.innerHTML = `
      <div class="game-container">
        <h2>${game.title}</h2>
        <p>Put the events in the correct order!</p>
        <div class="game-board" style="grid-template-columns: 1fr;">
          ${shuffled.map((event, i) => `
            <div class="game-card" data-order="${event.order}">
              ${event.text}
            </div>
          `).join('')}
        </div>
        <button class="btn btn-primary" onclick="checkSequence()">
          Check Order
        </button>
        <button class="btn btn-secondary" onclick="initGames('${containerId}')">
          Back to Menu
        </button>
      </div>
    `;

    let selectedOrder = 1;
    container.querySelectorAll('.game-card').forEach(card => {
      card.addEventListener('click', () => {
        if (!card.dataset.selected) {
          card.dataset.selected = selectedOrder;
          card.innerHTML += ` <strong>(${selectedOrder})</strong>`;
          selectedOrder++;
        }
      });
    });

    window.checkSequence = function() {
      const cards = Array.from(container.querySelectorAll('.game-card'));
      const correct = cards.every(card => 
        card.dataset.selected === card.dataset.order
      );

      if (correct) {
        alert('ðŸŽ‰ Perfect! You got the events in the right order!');
        cards.forEach(card => card.classList.add('matched'));
      } else {
        alert('Not quite right. Try again!');
        cards.forEach(card => {
          delete card.dataset.selected;
          card.innerHTML = card.innerHTML.split('<strong>')[0];
        });
        selectedOrder = 1;
      }
    };
  };

  showMenu();
}

// Auto-initialize if container exists
document.addEventListener('DOMContentLoaded', () => {
  if (document.getElementById('games-container')) {
    initGames('games-container');
  }
});

